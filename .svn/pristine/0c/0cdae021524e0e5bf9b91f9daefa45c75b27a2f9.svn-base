package com.huaao.web.business;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.HttpClientBuilder;
import org.codehaus.jackson.JsonParseException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.huaao.common.extension.DateTimeUtil;
import com.huaao.common.extension.LogUtils;
import com.huaao.common.extension.OSSUtil;
import com.huaao.common.extension.RespCode;
import com.huaao.common.extension.RespInfo;
import com.huaao.common.utilities.Filter;
import com.huaao.common.utilities.PramaStrHelper;
import com.huaao.model.home.AuthPassport;
import com.huaao.model.home.SystemVariable;
import com.huaao.model.home.UserInfo;
import com.huaao.service.business.AuthenticationService;
import com.huaao.web.home.AuthHelper;

import net.sf.json.JSONObject;

/** 
* @ClassName: ContentController 
* @Description: TODO(这里用一句话描述这个类的作用) 
* @author lj
* @date 2016年8月8日 下午3:43:41 
* 
* 
*/
@Controller@RequestMapping("/authentication")
public class AuthenticationController {

	@Value("${notify.host}")  
	 private String notifyHost;
	
	@Autowired
	private AuthenticationService authenticationService;
	
	@AuthPassport@RequestMapping("/index")
	public String index(HttpServletRequest request){
		HttpSession session = request.getSession(true);
		session.setAttribute("menuSession","YES");
		return "business/authentication/index";
	}
	@AuthPassport@RequestMapping("/index2")
	public String index2(HttpServletRequest request){
		return "business/authentication/index";
	}
	@AuthPassport@RequestMapping("/view")
	public String audit(String oper,int id,HttpServletRequest request,int type){
		request.setAttribute("oper", oper);
		if(oper.equals("edit")||oper.equals("show")){
			SqlRowSet user = authenticationService.queryWith(id,type);
			request.setAttribute("userForAudit", user);
		}
		
		
		return "business/authentication/audit";
	}
	
	@AuthPassport@RequestMapping("/list")
	@ResponseBody
	public RespInfo  list(Integer page,Integer rows, String filters ,HttpServletRequest request){
		RespInfo resp = new RespInfo(RespCode.Success.code, "");
		UserInfo currentUser = AuthHelper.getSessionUserAuth(request);
		
		Filter filter = null;
		if(org.apache.commons.lang.StringUtils.isNotBlank(filters)){
			ObjectMapper mapper = new ObjectMapper();
			try {
				filter = mapper.readValue(filters, Filter.class);
			} catch (JsonParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (JsonMappingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		StringBuilder filterStr  = new StringBuilder();
		Filter.buildFilterStr(filter, filterStr);
		
		String filterString = filterStr.toString();
		
		HttpSession session = request.getSession(true);
		String o= (String) session.getAttribute("menuSession");
		if(o.equals("YES")){
			PramaStrHelper.removeAllPramaStrMap();
			session.setAttribute("menuSession","NO");
		}
		else{
			session.setAttribute("menuSession","NO");
			if(!org.apache.commons.lang.StringUtils.isEmpty(filterString)){
				PramaStrHelper.pramaStrMap.put("authenticationPramaStrMap",filterString);
			}
			else
				filterString = PramaStrHelper.pramaStrMap.get("authenticationPramaStrMap");
		}
		
		
		List  list = authenticationService.queryForList(currentUser.getCommunityId(),page,rows,filterString);
		HashMap<String, Object> map = new HashMap<String, Object>();
		long recordSize = authenticationService.getCount(currentUser.getCommunityId(),filterString);
		map.put("records", recordSize);
		map.put("pages", recordSize%rows==0?recordSize/rows:recordSize/rows+1);
		map.put("rows", list);
		resp.setData(map);
		return resp;
	}
	//更新表状态
	@AuthPassport@RequestMapping("/auditing")
	@ResponseBody
	public RespInfo  auditing(int applyId, boolean reject,String reason,HttpServletRequest request) throws ParseException{
		UserInfo cuser = AuthHelper.getSessionUserAuth(request);
		RespInfo resp = new RespInfo(RespCode.Success.code, "");
		
		SqlRowSet verify = authenticationService.queryVerifyWith(applyId);
		verify.next();
		String usertype = StringUtils.isEmpty(verify.getString("usertype"))?cuser.getUsertype()+"":verify.getString("usertype");
		String useridentity = StringUtils.isEmpty(verify.getString("useridentity"))?cuser.getUserIdentity()+"":verify.getString("useridentity");
		String name = StringUtils.isEmpty(verify.getString("name"))?cuser.getName()+"":verify.getString("name");
		String idcard = StringUtils.isEmpty(verify.getString("idcard"))?cuser.getIdcard()+"":verify.getString("idcard");
		
		int gender = cuser.getGender();
		if(idcard!=null){
			int idcardLen = idcard.length();
			if(idcardLen==15){
				char cGender = idcard.charAt(idcardLen-1);
				gender = cGender%2==0?0:1;
			}else if(idcardLen==18){
				char cGender = idcard.charAt(idcardLen-2);
				gender = cGender%2==0?0:1;
			}
		}
		
		
		authenticationService.updateInfo(new Object[]{reject?4:3,usertype,useridentity,name,idcard,gender ,applyId});
		authenticationService.updateRejectReason(new Object[]{reason,applyId});
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("id", applyId);
		map.put("name", name);
		map.put("idcard", idcard);
		map.put("gender", gender);
		map.put("status", reject?4:3);
		map.put("type", usertype);
		map.put("audit_time",new Date().getTime()/1000);
		resp.setData(map);
		LogUtils.saveLog(request, "实名认证-审核");
		//拒绝消息提醒
		if(reject){
			notifyHost = notifyHost.endsWith("/")?notifyHost:notifyHost+"/";
			try {
				HttpClientBuilder.create().build().execute(new HttpGet(notifyHost+"auth/authNotice.action?uid="+applyId));
			} catch (ClientProtocolException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		
		return resp;
	}
	
	@AuthPassport@RequestMapping("/updateInfo")
	@ResponseBody
	public RespInfo  updateInfo(HttpServletRequest request) throws ParseException{
		UserInfo cuser = AuthHelper.getSessionUserAuth(request);
		RespInfo resp = new RespInfo(RespCode.Success.code, "");
		
		String id = request.getParameter("id");
		String name = (String)request.getParameter("name");
		String img = request.getParameter("img");
		String cellphone = request.getParameter("cellphone");
		String position = request.getParameter("position");
		
		String number = request.getParameter("number");
		String idcard = request.getParameter("idcard");
		
		String addr_temp = request.getParameter("address");
		//String deptId = request.getParameter("dept_id");
		
		String useridentity = request.getParameter("useridentity");
		
		String addr="";
		String address="";
		
		SqlRowSet user = authenticationService.selectAddrById(Integer.valueOf(id));
		user.next();
		addr = StringUtils.isEmpty(user.getString("address"))?"":user.getString("address");
		
		String[] addrArr = addr.split(";",-1);
		if(addrArr.length==1){
			address=addrArr[0]+";;"+addr_temp;
		}else{
			if(addrArr.length==2){
				address=addrArr[0]+";"+addrArr[1]+";"+addr_temp;
			}else{
				if(addrArr.length==3){
					address=addrArr[0]+";"+addrArr[1]+";"+addr_temp;
				}else{
					address=addrArr[0]+";"+addrArr[1]+";"+addr_temp+";"+addrArr[3];
				}
			}
		}
		
		
		authenticationService.updateUser(name,img,cellphone,position,number,idcard,address,useridentity,id);
		LogUtils.saveLog(request, "实名认证-修改基本信息");
		return resp;
	}
	//修改身份证照片
	@AuthPassport@RequestMapping("/updateImg")
	@ResponseBody
	public RespInfo  updateImg(HttpServletRequest request) throws ParseException{
		UserInfo cuser = AuthHelper.getSessionUserAuth(request);
		RespInfo resp = new RespInfo(RespCode.Success.code, "");
		String id = request.getParameter("id");
		String idcard_img1 = (String)request.getParameter("idcard_img1");
		String idcard_img2 = request.getParameter("idcard_img2");
		
		SqlRowSet verify = authenticationService.queryVerifyWith(Integer.parseInt(id));
		
		if(verify.next()){
			authenticationService.updateVerifyRecord(new Object[]{idcard_img1,idcard_img2,id});
		}else{
			authenticationService.insertVerify(new Object[]{id,idcard_img1,idcard_img2,null,null,null,null,null,null});
		}
		LogUtils.saveLog(request, "实名认证-修改身份证");
		return resp;
	}
	
	/**
	 * 图片上传
	 * @throws IOException 
	 */
    @AuthPassport@RequestMapping(value = "/uploadImg", method = {RequestMethod.POST})
	public void uploadImg(@RequestParam(value = "file") CommonsMultipartFile file,HttpServletRequest request,HttpServletResponse response) throws IOException{
		UserInfo user =AuthHelper.getSessionUserAuth(request);
		String img ="";
		String flag = "";
		JSONObject jo = new JSONObject();
    	if (!file.isEmpty()) {
    		String pathName=file.getFileItem().getName();
            String prefix=pathName.substring(pathName.lastIndexOf(".")+1);
            String fileName = "A_"+DateTimeUtil.getCurrentDate("yyyyMMddHHmmssSSS")+"."+prefix;
    		flag = OSSUtil.uploadFile(file, fileName);
    	    img = "http://"+SystemVariable.DomainName_OSS+"/"+fileName;
		}
    	jo.element("flag", flag);
    	jo.element("img", img);
    	response.setContentType("text/html;charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
		PrintWriter pw = response.getWriter();
		pw.print(jo);
		pw.flush();
    }
	
}
