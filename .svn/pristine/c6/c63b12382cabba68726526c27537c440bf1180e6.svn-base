/**
 * 
 */
package com.huaao.web.business;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.io.FileUtils;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.entity.ContentType;
import org.apache.http.impl.client.HttpClientBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.huaao.common.extension.DateTimeUtil;
import com.huaao.common.extension.LogUtils;
import com.huaao.common.extension.OSSUtil;
import com.huaao.common.extension.RespCode;
import com.huaao.common.extension.RespInfo;
import com.huaao.common.extension.export_word;
import com.huaao.common.utilities.Page;
import com.huaao.common.utilities.TwoDimensionCode;
import com.huaao.dao.base.BaseDao;
import com.huaao.model.business.AuditRecord;
import com.huaao.model.content.Content;
import com.huaao.model.home.AuthPassport;
import com.huaao.model.home.SystemVariable;
import com.huaao.model.home.UserInfo;
import com.huaao.service.business.OnlineJobService;
import com.huaao.service.business.PoliceService;
import com.huaao.service.business.PupilUpdateHistoryService;
import com.huaao.service.content.ContentService;
import com.huaao.service.goods.MallService;
import com.huaao.service.system.DictionaryManageService;
import com.huaao.web.home.AuthHelper;

import net.sf.json.JSONObject;

/** 
* @ClassName: ContentController 
* @Description: TODO(这里用一句话描述这个类的作用) 
* @author lj
* @date 2016年8月8日 下午3:43:41 
* 
* 
*/
@Controller@RequestMapping("/onlineJob")
public class OnlineJobController {

	
	@Autowired
	private OnlineJobService onlineJobService;
	@Autowired
	private PoliceService lice;
	
	@Value("${notify.host}")  
	 private String notifyHost;
	@Autowired
	private PoliceService policeService;
	@Autowired
	private PupilUpdateHistoryService pupilUpdateHistoryService;
	@Autowired
	private DictionaryManageService dictionaryManageService;
	
	@AuthPassport@RequestMapping("/index")
	public String index(HttpServletRequest request){
		UserInfo cuser = AuthHelper.getSessionUserAuth(request);
		List pupilTypeList = dictionaryManageService.queryDictionaryListByParent("135", "",cuser.getCommunityId());
		request.setAttribute("pupilTypeList", pupilTypeList);
		request.setAttribute("cuser", cuser);
		return "business/onlineJob/index";
	}
	
	@AuthPassport@RequestMapping("/view")
	public String audit(String oper,int id,HttpServletRequest request){
		UserInfo cuser = AuthHelper.getSessionUserAuth(request);
		request.setAttribute("oper", oper);
		if(oper.equals("edit")||oper.equals("show")){
			SqlRowSet cureApply = onlineJobService.queryWith(id);
			request.setAttribute("cureApply", cureApply);
			
			List pupilTypeList = dictionaryManageService.queryDictionaryListByParent("135", "",cuser.getCommunityId());
			request.setAttribute("pupilTypeList", pupilTypeList);
			
			List list = onlineJobService.queryAuditRecordForList(id);
			int index = -1;
			for (int i = 0; i < list.size(); i++) {
				Map item = (Map)list.get(i);
				Integer status = (Integer)item.get("status");
				if(status==0){
					index = i;
					break;
				}
			}
			
			List flowList = list.subList(0, index+1);
			
			Collections.reverse(flowList);
			request.setAttribute("auditFlow", flowList);
		}
		
		return "business/onlineJob/audit";
	}
	
	@AuthPassport@RequestMapping("/list")
	@ResponseBody
	public RespInfo  list(HttpServletRequest request){
		RespInfo respInfo = new RespInfo(RespCode.Success.code, "");
		UserInfo cuser = AuthHelper.getSessionUserAuth(request);
		Page pager = new Page(request);
		HashMap<String, Object> map=new HashMap<String, Object>();
		onlineJobService.queryForPage(cuser.getCommunityId(),pager);
		map.put("records", pager.getTotalRows());
		map.put("pages", pager.getTotalPages());
		map.put("rows", pager.getResultList());
		respInfo.setData(map);
		return respInfo;
	}
	//更新表状态
	@AuthPassport@RequestMapping("/auditing")
	@ResponseBody
	public RespInfo  auditing(int applyId, boolean reject,String reason,HttpServletRequest request) throws ParseException{
		UserInfo cuser = AuthHelper.getSessionUserAuth(request);
		RespInfo resp = new RespInfo(RespCode.Success.code, "");
		int auditId = cuser.getId(); //当前审批人
		
		SqlRowSet apply = onlineJobService.queryWith(applyId);
		apply.next();
		String audits = apply.getString("audits"); 
		int oldStatus = apply.getInt("status");
		/*0已提交1社区复核2社区民警审核3入院4社区驳回5社区民警驳回6出院*/
		
		
		
		
		
		//更新申请表
		Integer  newStatus = -1;
		if(reject){
			if(oldStatus==1||oldStatus==2){
				newStatus = oldStatus+3;
			}else{
				newStatus = oldStatus+2;
			}
			
		}else{
			switch (oldStatus) {
			case 1:
				newStatus = 2;
				break;
			case 2:
				newStatus = 7;
				break;
			case 3:
				try {
					notifyHost = notifyHost.endsWith("/")?notifyHost:notifyHost+"/";
					HttpClientBuilder.create().build().execute(new HttpGet(notifyHost+"auth/confirmNotice.action?tableid="+applyId+"&id=1"));
				} catch (Exception e) {
					e.printStackTrace();
				}
				newStatus = 11;
				break;
			case 7:
				newStatus = 8;
				break;
			case 8:
				newStatus = 3;
				break;
				
			case 11:
				try {
					notifyHost = notifyHost.endsWith("/")?notifyHost:notifyHost+"/";
					HttpClientBuilder.create().build().execute(new HttpGet(notifyHost+"auth/confirmNotice.action?tableid="+applyId+"&id=2"));
				} catch (Exception e) {
					e.printStackTrace();
				}
				newStatus = 6;
				break;
				
			default:
				break;
			}
		}
			audits+="|"+auditId;
		int count = onlineJobService.update(newStatus, audits,applyId,oldStatus);
		if(count>0){
			
			//获取上一条审核记录
			Map preRecord = onlineJobService.queryPreAuditRecord(applyId);
			int preId = (Integer)preRecord.get("id");
			
			//插入新的审核记录
			
			AuditRecord auditRecord = new AuditRecord();
			auditRecord.setApplyId(applyId);
			auditRecord.setType(2);//网上办事
			auditRecord.setAudit(cuser.getName());
			auditRecord.setStatus(oldStatus);
			auditRecord.setAuditDate(new Date().getTime()/1000);
			auditRecord.setCommunityId(cuser.getCommunityId());
			auditRecord.setRemark(reason);
			auditRecord.setPreId(preId);
			
			onlineJobService.insertAuditRecord(new Object[]{auditRecord.getCommunityId(),auditRecord.getType(),auditRecord.getApplyId(),auditRecord.getAudit(),auditRecord.getStatus(),auditRecord.getAuditDate(),auditRecord.getRemark(),auditRecord.getPreId()});
			
		}
		LogUtils.saveLog(request, "网上办事-审核");
		return resp;
	}
	
	@AuthPassport@RequestMapping("/downloadWordfile")
	public ResponseEntity<byte[]> downloadWordfile(HttpServletRequest req ,HttpServletResponse resp) throws Exception{
		
		String downid=req.getParameter("id");
		if(downid!=null){
			List<Map<String,Object>> list=onlineJobService.queryToidinfo(Integer.valueOf(downid));
			if(list!=null&&list.size()>0){
				//这里是获取到查询到的主数据 
				Map<String, Object> map=list.get(0);
				
				Map<String,Object> mapData=new HashMap<String, Object>();
				mapData.put("Patient",map.get("name"));
				mapData.put("Gender",map.get("gender")!=null?map.get("gender").toString().equals("0")?"女":"男":"");
				mapData.put("Identity",map.get("idcard"));
				mapData.put("PresentAddress", map.get("addr")==null?"":map.get("addr"));
				mapData.put("IdentityAdderss", map.get("registeraddr")==null?"":map.get("registeraddr"));
				String yibao = "否",dibao="否";
				if(map.get("nums")!=null&&!map.get("nums").toString().isEmpty()){
					String [] nums=map.get("nums").toString().split(",");
					yibao=nums[0];
					dibao=nums[1];
				}
				mapData.put("yibaoHao", yibao);
				mapData.put("dibaohao", dibao);
				mapData.put("jName", map.get("jwname")==null?"":map.get("jwname"));
				mapData.put("jhGen", map.get("jwgender")!=null?map.get("jwgender").toString().equals("0")?"女":"男":"");
				mapData.put("jIdentity", map.get("jwidcard")==null ?"":map.get("jwidcard"));
				mapData.put("workunit", map.get("workunit")==null?"":map.get("workunit"));
				String [] adders=map.get("address")==null?new String []{}:map.get("address").toString().split(";");
				String stre="";
				if(adders.length>0){
					if(adders.length==1){
						stre=adders[0];
					}else{
						if(adders.length==2){
							stre=adders[0]+adders[1];
						}else{
							stre=adders[0]+adders[1]+adders[2];
						}
					}
					
				}
				mapData.put("adderss",stre);
				mapData.put("cellPhone", map.get("cellphone")==null?"":map.get("cellphone"));
				
				//这里是获取审批的记录集合，通过固定筛选，可以加载固定数据。
				
				List<Map<String,Object>> listRecord=lice.queryForRecordToid(Integer.valueOf(downid),2);
				mapData.put("TextCoent", map.get("description")==null?"":map.get("description"));
				mapData.put("jNametow", map.get("jwname")==null?"": map.get("jwname"));
				mapData.put("time",  map.get("createtime")==null?"":map.get("createtime"));
				//这里开始是审批记录表
				mapData.put("yijian","");
				mapData.put("qungan", "");
				mapData.put("guanganTime","");	
				mapData.put("paichusuo", "");
				mapData.put("mingjing", "");
				mapData.put("jcTime", "");
				mapData.put("gonganfenju","");
				mapData.put("mingjing", "");
				mapData.put("mingjingTime","");
				if(listRecord!=null){
				for (Map<String, Object> map2 : listRecord) {
					switch (Integer.valueOf(map2.get("status").toString())) {
					case 1:
					case 4:
						//这里是社区的复核和驳回意见
						mapData.put("yijian", map2.get("remark")==null?"":map2.get("remark"));
						mapData.put("qungan", map2.get("audit")==null?"":map2.get("audit"));
						mapData.put("guanganTime",map2.get("auditdate")==null?"":map2.get("auditdate"));	
						break;
					case 7:
					case 9:
						//这里是派出所的复核和驳回意见
						mapData.put("paichusuo", map2.get("remark")==null?"":map2.get("remark"));
						mapData.put("mingjing", map2.get("audit")==null?"":map2.get("audit"));
						mapData.put("jcTime", map2.get("auditdate")==null?"":map2.get("auditdate"));
						break;
					case 8:
					case 10:
						//这里是分局的复核和驳回意见
						mapData.put("gonganfenju", map2.get("remark")==null?"":map2.get("remark"));
						mapData.put("mingjing", map2.get("audit")==null?"":map2.get("audit"));
						mapData.put("mingjingTime", map2.get("auditdate")==null?"":map2.get("auditdate"));
						break;	
					}
				}
				}
				export_word word = new export_word();
				//map,"D:/win7我的文档-桌面-收藏夹/Desktop/文件备份"
				String path=req.getSession().getServletContext().getRealPath("/WEB-INF");
				HttpHeaders headers = new HttpHeaders();
				String  time=System.currentTimeMillis()+"";
				headers.setContentDispositionFormData("attachment", time+".doc");   
		        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);   
				File file=word.createDoc(mapData,path+"/files/","JiuZhiShenQing.ftl",path+"/files/Copyfile/",time);
				return new ResponseEntity<byte[]>(FileUtils.readFileToByteArray(file),    
                        headers, HttpStatus.CREATED); 
			}
		}
		return null;
	}
	
	@AuthPassport@RequestMapping("/downloadWordfileFTL")
	public ResponseEntity<byte[]> downloadWordfileFTL(HttpServletRequest req ,HttpServletResponse resp) throws Exception{
		String fileName=new String("申请表格.doc".getBytes("UTF-8"),"iso-8859-1");
		String path=req.getSession().getServletContext().getRealPath("/WEB-INF/files/shenqing.doc");
		File file=new File(path);
		HttpHeaders headers = new HttpHeaders();
		headers.setContentDispositionFormData("attachment",fileName);   
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);   
		return new ResponseEntity<byte[]>(FileUtils.readFileToByteArray(file),    
                headers, HttpStatus.CREATED); 
	}
	
	
	
}
