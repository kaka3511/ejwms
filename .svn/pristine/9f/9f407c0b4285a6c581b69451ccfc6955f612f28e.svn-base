package com.huaao.web.system;

import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.huaao.model.home.AuthPassport;
import com.huaao.service.system.FlowNodeService;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Controller
@RequestMapping("/flowNode")
public class FlowNodeController {

	@Autowired
	private FlowNodeService flowNodeService;

	@AuthPassport
	@RequestMapping("/flowNodeIndex")
	public String index(HttpServletRequest request) {
		List flowNodeList = flowNodeService.findAll();
		request.setAttribute("flowNodeList", flowNodeList);
		return "system/flowNode/index";
	}

	@AuthPassport
	@RequestMapping(value = "/list.do", method = { RequestMethod.POST })
	public void flowNodeList(HttpServletRequest request, HttpServletResponse response, Integer id) throws Exception {
		List flowList = flowNodeService.findNodesById(id);
		Iterator it = flowList.iterator();
		JSONArray ja = new JSONArray();
		while (it.hasNext()) {
			Map flowMap = (Map) it.next();
			JSONObject jo = new JSONObject();
			jo.element("id", flowMap.get("id"));
			jo.element("name", flowMap.get("name"));
			jo.element("preNode", flowMap.get("preNode"));
			jo.element("nextNode", flowMap.get("nextNode"));
			jo.element("index", flowMap.get("index"));
			ja.add(jo);
		}
		JSONObject jo = new JSONObject();
		jo.element("data", ja);
		response.setContentType("text/html;charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
		PrintWriter pw = response.getWriter();
		pw.print(jo);
		pw.flush();
	}

	@AuthPassport
	@RequestMapping(value = "/delete.do")
	public @ResponseBody void deleteFlowNode(HttpServletRequest request, HttpServletResponse response, int id) throws Exception {
		PrintWriter pw = response.getWriter();
		response.setContentType("text/html; charset=UTF-8");
		int flag = flowNodeService.delete(id);
		if(flag == 1) {
			pw.print("true");			
		} else {
			pw.print("false");
		}
		pw.flush();
	}

	@AuthPassport
	@RequestMapping(value = "/save.do")
	public @ResponseBody void save(HttpServletRequest request, HttpServletResponse response) throws Exception {
		PrintWriter pw = response.getWriter();
		response.setContentType("text/html; charset=UTF-8");
		//Integer index = Integer.parseInt(request.getParameter("index"));
		String name = request.getParameter("name");
		Integer flowId = Integer.parseInt(request.getParameter("flowId"));
		if(!StringUtils.isBlank(request.getParameter("id"))) {
			Integer id = Integer.parseInt(request.getParameter("id"));
			flowNodeService.update(name, id);
		} else {
			flowNodeService.save(name, flowId);			
		}
		pw.print("true");
		pw.flush();
	}

	//查找关联人员
	@AuthPassport
	@RequestMapping(value = "/selectByFlowNode")
	public void selectByFlowNode(HttpServletRequest request, HttpServletResponse response) throws Exception {
		Integer flowNodeId = Integer.parseInt(request.getParameter("id"));
		request.getSession().setAttribute("flowNode", flowNodeId);
		List flowList = flowNodeService.findByFlowNode(flowNodeId);
		Iterator it = flowList.iterator();
		JSONArray ja = new JSONArray();
		while (it.hasNext()) {
			Map flowMap = (Map) it.next();
			JSONObject jo = new JSONObject();
			jo.element("id", flowMap.get("id"));
			jo.element("name", flowMap.get("name"));
			ja.add(jo);
		}
		JSONObject jo = new JSONObject();
		jo.element("data", ja);
		response.setContentType("text/html;charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
		PrintWriter pw = response.getWriter();
		pw.print(jo);
		pw.flush();
	}
	
	@AuthPassport
	@RequestMapping(value = "/selectAllUser")
	public void selectAllUser(HttpServletRequest request, HttpServletResponse response) throws Exception {
		List flowList = flowNodeService.findAllUser();
		Iterator it = flowList.iterator();
		JSONArray ja = new JSONArray();
		while (it.hasNext()) {
			Map flowMap = (Map) it.next();
			JSONObject jo = new JSONObject();
			jo.element("id", flowMap.get("id"));
			jo.element("name", flowMap.get("name"));
			ja.add(jo);
		}
		JSONObject jo = new JSONObject();
		jo.element("data", ja);
		response.setContentType("text/html;charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
		PrintWriter pw = response.getWriter();
		pw.print(jo);
		pw.flush();
	}
	
	@AuthPassport
	@RequestMapping(value = "/saveUser.do")
	public @ResponseBody void saveUser(HttpServletRequest request, HttpServletResponse response) throws Exception {
		PrintWriter pw = response.getWriter();
		response.setContentType("text/html; charset=UTF-8");
		Integer userId = Integer.parseInt(request.getParameter("saveuserid"));
		Integer flowNodeId = (Integer) request.getSession().getAttribute("flowNode");
		flowNodeService.saveUser(userId, flowNodeId);
		pw.print("true");
		pw.flush();
	}
	
	@AuthPassport
	@RequestMapping(value = "/deleteUser.do")
	public @ResponseBody void deleteUser(HttpServletRequest request, HttpServletResponse response, int id) throws Exception {
		PrintWriter pw = response.getWriter();
		response.setContentType("text/html; charset=UTF-8");
		Integer flowNodeId = (Integer) request.getSession().getAttribute("flowNode");
		flowNodeService.deleteUser(id, flowNodeId);
		pw.print("true");
		pw.flush();
	}
}
