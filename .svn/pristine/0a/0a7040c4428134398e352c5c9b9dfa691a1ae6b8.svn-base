package com.huaao.web.system;

import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import com.huaao.common.extension.DateTimeUtil;
import com.huaao.common.extension.LogUtils;
import com.huaao.common.extension.OSSUtil;
import com.huaao.common.extension.StringUtil;
import com.huaao.model.home.AuthPassport;
import com.huaao.model.home.SystemVariable;
import com.huaao.model.home.UserInfo;
import com.huaao.service.system.DictionaryManageService;
import com.huaao.web.home.AuthHelper;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@Controller
@RequestMapping(value = "/dictionaryManage")
public class DictionaryManageController {

	@Autowired
	private DictionaryManageService dictionaryManageService;

	@AuthPassport
	@RequestMapping(value = "/dictionary")
	public String index(HttpServletRequest request, HttpServletResponse response) throws Exception {
		UserInfo user = AuthHelper.getSessionUserAuth(request);
		return "system/dictionary";
	}

	@AuthPassport
	@RequestMapping(value = "/dictionaryChild/{id}")
	public String index(@PathVariable String id, @RequestParam String name, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		name = new String(name.getBytes("iso-8859-1"),"utf-8");
		request.setAttribute("parentId", id);
		request.setAttribute("parentName", name);
		return "system/dictionaryChild";
	}

	@AuthPassport
	@RequestMapping(value = "/dictionaryQuery.do", method = { RequestMethod.POST })
	public void dictionaryList(HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		UserInfo user = AuthHelper.getSessionUserAuth(request);
		String parentId = request.getParameter("parentId");
		String queryName = request.getParameter("queryName");
		List dictionaryList = this.dictionaryManageService.queryDictionaryListByParent(parentId, queryName,user.getCommunityId());
		JSONObject jo=handleData(dictionaryList);
		jo.element("total", this.dictionaryManageService.countDictionaryListByParent(parentId,queryName,user.getCommunityId()));
		response.setContentType("text/html;charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
		PrintWriter pw = response.getWriter();
		pw.print(jo);
		pw.flush();
	}
	private JSONObject handleData(List serviceList){
		Iterator it = serviceList.iterator();
		JSONArray ja = new JSONArray();
		int i = 1;
		while (it.hasNext()) {
			Map dictionaryMap = (Map) it.next();
			JSONObject jo = new JSONObject();
			jo.element("id", dictionaryMap.get("id"));
			jo.element("xh", i++);
			jo.element("name", dictionaryMap.get("dictionary_name"));
			jo.element("code", dictionaryMap.get("dictionary_code"));
			jo.element("value", dictionaryMap.get("dictionary_value"));
			jo.element("status", dictionaryMap.get("status"));
			jo.element("order", dictionaryMap.get("dictionary_order"));
			jo.element("createtime", DateTimeUtil.getDateFromObject(dictionaryMap.get("createtime")));
			jo.element("parentId", dictionaryMap.get("dictionary_parent_id"));
			jo.element("img", dictionaryMap.get("dictionary_img"));
			ja.add(jo);
		}
		JSONObject jo = new JSONObject();
		jo.element("data", ja);
		return jo;
	}
	
	@AuthPassport
	@RequestMapping(value = "/saveDictionary.do", method = { RequestMethod.POST })
	public void saveEntity(@RequestParam(value = "uploadImg") CommonsMultipartFile file,HttpServletRequest request,HttpServletResponse response) throws Exception { 	
		UserInfo user = AuthHelper.getSessionUserAuth(request);
		String id = request.getParameter("id");
		String type = request.getParameter("type");
		String name = request.getParameter("name").trim();
		String code = request.getParameter("code").trim();
		String value = request.getParameter("value");
		String order = request.getParameter("order");
		String status = request.getParameter("status");
		int communityId=user.getCommunityId();
		String parentId = request.getParameter("parentId");
		String communityImg = request.getParameter("communityImg");
		String img = "";
    	String flag = "";
		
		PrintWriter pw = response.getWriter();
		response.setContentType("text/html; charset=UTF-8");
		if (!this.dictionaryManageService.checkCodeAvailable(id,code,communityId,type,parentId)) {
			pw.print("false");
		} else {
			if (StringUtil.isEmpty(parentId)) {
				parentId = "0";
			}
			if (StringUtil.isEmpty(value)) {
				value = "0";
			}
			if (StringUtil.isEmpty(order)) {
				order = "0";
			}
			if (StringUtil.isEmpty(status)) {
				status = "1";
			}
			
			if (!file.isEmpty()) {
				String pathName=file.getFileItem().getName();
	            String prefix=pathName.substring(pathName.lastIndexOf(".")+1);
	            String fileName = "D_"+DateTimeUtil.getCurrentDate("yyyyMMddHHmmssSSS")+"."+prefix;
	    		flag = OSSUtil.uploadFile(file, fileName);
	    	    img = "http://"+SystemVariable.DomainName_OSS+"/"+fileName;
	    	    if(!StringUtil.isEmpty(id)){     //新增
	    	    	List imgList = dictionaryManageService.queryDictionaryById(id);
	    	    	Iterator it = imgList.iterator();
	    	    	JSONObject jo = new JSONObject();
	    			if(it.hasNext()){
	    				Map entityMap = (Map) it.next();
	    				if(entityMap.get("img")!=null&&!"".equals(entityMap.get("img"))){
	    	    	    	OSSUtil.deleteFile(entityMap.get("img").toString().substring(SystemVariable.DomainName_OSS.length()+8));
	    	    	    }
	    			}
	    	    }
			}else{
				if(communityImg!=null&&!communityImg.isEmpty()){
					img=communityImg;
				}
			}
			
			this.dictionaryManageService.saveDictionary(id, name, code, parentId,order, user.getId(),communityId,value,status,img);
			LogUtils.saveLog(request, "办事指南子项目维护-保存");
			pw.print("true");
		}
		pw.flush();
	}

	
	@AuthPassport
    @RequestMapping(value = "/deleteDictionary.do", method = { RequestMethod.POST })
    public @ResponseBody void deleteDictionary(HttpServletResponse response,int id,HttpServletRequest request) throws Exception {
		PrintWriter pw = response.getWriter();
		response.setContentType("text/html; charset=UTF-8");
		this.dictionaryManageService.deleteDictionaryById(id);
		LogUtils.saveLog(request, "办事指南子项目维护-删除");
		pw.print("true");
		pw.flush();
	}
}
